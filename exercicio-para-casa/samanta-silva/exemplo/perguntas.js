
/* 1. O que √© um Objeto? Por que ele √© t√£o importante na linguagem JavaScript?*/
 R: Objetos em JavaScript √© uma cole√ß√£o de dados.
 Sua importancia √© que atrav√©s de vari√°veis, armazenam valores referenciados por nome, que s√£o utilizados em diversas outras partes de um programa, atrav√©s de fun√ß√µes e seus m√©todos.

//Crie um exemplo de um objeto

const album = {
  titulo: "Aprendendo a programar",
  ano: 2020,
  showInfo: function() {
    alert("T√≠tulo do √°lbum: " + this.titulo + "Lan√ßado em: " + this.ano);
  }
};



//===========================================================================================================
/* 2. Qual √© a diferen√ßa entre uma fun√ß√£o e uma Arrow Function?*/

R: Uma fun√ß√£o √© um procedimento, e uma Arrow Function √© um procedimento de uma sintaxe mais curta, e sabemos que √© uma fun√ß√£o pelo s√≠mbolo =>.

//Crie um exemplo de Arrow Function

const dobro = (num) => {
  return num * 2
}



//==========================================================================================================
/* 3. Como funciona o destructuring?*/
R: Funciona como uma desestrutura√ß√£o, que possibilita extrair dados de arrays ou objetos em vari√°veis distintas.

//Crie um exemplo de destructuring de objeto e array
*/Para acessar os tr√™s valores de um array:

const array = ['Um', 'Dois', 'Tr√™s'];

let primeiro = array[0];
let segundo  = array[1];
let terceiro = array[2];

Reescrevendo o mesmo c√≥digo, utilizando o destructuring:

const array = ['Um', 'Dois', 'Tr√™s'];

let [primeiro, segundo, terceiro] = array;



//========================================================================================================
/* 4. Para que serve o Spread e Rest?*/
R: A sintaxe de espalhamento (Spread) 'expande' um array em v√°rios elementos,√© representado por tr√™s pontos.
Enquanto a sintaxe Rest, coleta multiplos elementos e 'condensa' eles em um √∫nico elemento.


//Crie um exemplo como utilizar Spred e Rest

Spread:
const pessoas = ['Samanta', 'Leandro', 'Arhiane']
const todasAsPessoas = [ ...pessoas, 'Thabata', 'Thalita']
 
console.log(todasAsPessoas)
  // [ 'Samanta', 'Leandro', 'Arhiane', 'Thabata', 'Thalita' ]

Rest:
function listagem (primeiro, segundo, ...outros) {
  console.log(`Na lista est√£o: $, $. Os demais s√£o: ${outros.join(', ')}.`)
}

listagem('Samanta', 'Leandro', 'Arhiane', 'Thabata', 'Thalita')
//Na lista est√£o: Samanta, Leandro. Os demais s√£o: Arhiane, Thabata, Thalita.



//=========================================================================================================
/* 5. Quais as vantagens de utilizar o c√≥digo em modules em JavaScript ?*/
R: Os m√≥dulos permitem que blocos de c√≥digo como fun√ß√µes, classes e constantes em arquivos separados possam ser importados quando necess√°rio, facilitando o processo de manuten√ß√£o e reusabilidade de um projeto JavaScript.


//Crie um exemplo utilizando module 

Por exemplo, se tivermos um arquivo sayHi.js exportando uma fun√ß√£o:
// üìÅ sayHi.js
export function sayHi(user) {
  alert(`Hello, ${user}!`);
}

Em seguida, outro arquivo pode importar e us√°-lo:

// üìÅ main.js
import {sayHi} from './sayHi.js';

alert(sayHi); // function...
sayHi('John'); // Hello, John!

Ao executar o exemplo no navegador,como os m√≥dulos suportam palavras-chave e recursos especiais, devemos informar ao navegador que um script deve ser tratado como um m√≥dulo, usando o atributo <script type="module">.

O resultado no index.html ser√°:

Resultadosay.js 
<!doctype html>
<script type="module">
  import {sayHi} from './say.js';

  document.body.innerHTML = sayHi('John');
</script>



//==========================================================================================================
/* 6. O que √© o Fetch? Quando utilizamos ele?*/
R: Fetch envia requisi√ß√µes ass√≠ncronas para o servidor. Utilizamos o Fetch para acessarmos ou escrevermos dados em apis externas.


//Crie um exemplo utilizando Fetch
function getDados (url) {
  fetch(url)
      .then(response => response.json())
      .then(json => console.log(json))
      .catch(erro => console.log(erro));
}
getDados(url);
}



//==========================================================================================================
/*7. Qual a vantagem de utilizar Async/Await?*/

R: Com async e await podemos trabalhar com c√≥digo ass√≠ncrono, em um estilo mais parecido com o bom e velho c√≥digo s√≠ncrono.
Usar essas fun√ß√µes ass√≠ncronas com Promises nos poupam do ‚ÄúCallback Hell‚Äù, mas mesmo assim, precisamos passar uma fun√ß√£o de Callback para cada then().



//Utilizando o exemplo do Fetch, refatore utilizando o async await.

// podemos colocar try { } catch(e) { },// para lidarmos com erros
async function fetchProdutos(url) {
  const response = await fetch(url);
  const json = await response.json();
  return json;
}

fetchProdutos("https://ranekapi.origamid.dev/wp-json/api/produto");



//============================================================================================================
/* 8. Quando devemos utilizar o Map, Filter e o Reduce?*/
R: Ultilizamos as fun√ß√µes Map, Filter e Reduce para efetuar opera√ß√µes em listas, como transforma√ß√£o, filtragem e agrega√ß√£o de forma muito limpa e pr√°tica.



//Crie um exemplo utilizando Map, Filter e o Reduce

Exemplo Map:
const numeros = [9, 2, 5]
function dobrar(item) {
  return item * 2
}
const numerosDobrados = numeros.map(dobrar)
//console.log(numerosDobrados) // [18, 4, 10]

Exemplo Filter:
const numeros = [9, 2, 5]
function impar(item) {
  return item % 2 !== 0
}
//const numerosImpares = numeros.filter(impar)

Exemplo Reduce:
const numeros = [9, 2, 5]
function somarTodos(acumulador, itemAtual) {
  return acumulador + itemAtual
}
const numerosSomados = numeros.reduce(somarTodos)
//console.log(numerosSomados) // 16



//============================================================================================================
/*9. Quando utilizamos as Express√µes?*/
R: Utilizamos as Express√µes, para facilitar a manipula√ß√£o de strings, atrav√©s de padr√µes que podem ser utilizados para valida√ß√£o e busca de dados.

//Crie um exemplo de uma Express√£o utilizando o operador && 

Com o operador && vamos comparar as duas express√µes abaixo, como exemplo:

1 == 1 && 2 == 2 => s√≥ ser√° true se as duas condi√ß√µes forem verdadeiras.

